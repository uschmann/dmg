; ASCII table for hex values from 0-F
HexDigits:
	DB	$30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $41, $42, $43, $44, $45, $46

; **
; Converts the given coordinates to the coressponding
; BgMapAddress for BgMap0
; --
; Input:	a = y; b = x;
; Output:	hl = address
; **
coordsToAdress0:
	push	af
	push	de

	ld	d,0
	ld	e,SCRN_VX_B
	call	DE_Times_A		; _Y * Screen width
	ld	de,_SCRN0
	add	hl,de

	ld	a,b			; Add x
	ld	d,0
	ld	e,a
	add	hl,de

	pop	de
	pop	af
	ret

; **
; Sets the OAM memory to 0
; **
clearOamMemory:
	push	af					; save register
	push	bc
	push	hl

	ld	a, 0					; Fill OAM memory with 0
	ld	hl, _OAMRAM
	ld	bc, $00A0
	call	mem_SetVRAM

	pop	hl					; restore register
	pop	bc
	pop	af
	ret

clearScreen:
	push	af					; save register
	push	hl
	push	bc

	ld	a, 32					; Clear screen
	ld	hl, _SCRN0
	ld	bc, SCRN_VX_B * SCRN_VY_B
	call	mem_SetVRAM

	pop	bc					; restore register
	pop	hl
	pop	af
	ret

; **
; Prints the lower 4 bit of c in ASCII at position x
; c = number
; d = x
; **
printHex4:
	push	de			; Save register pair de

	ld	hl, _SCRN0		; Base BgMap0-Adress
	ld	a,l			; Increase hl by d
	add	d			;
	ld	l,a			;

	ld	de,HexDigits	; Base address of array of Digits
	ld	a,e			; Increase de by value stored in c
	add	a,c			;
	ld	e,a			;

	ld	a, [de]		; Store the digit in ASCII into a
	ld	[hl],a		; Print ASCII-reprensentation
	
	pop de			; restore register pair de
	ret

; **
; Print value of c as HEX string
; c = number
; d = x
; **
printHex:
	call	waitForVblank
	push 	bc
	push	de
	push	af

	push	bc
	ld	a,c			; get high nibble
	srl	a			;
	srl	a			;
	srl	a			;
	srl	a			;
	ld	c,a			;
	call	printHex4		; print low nibble
	pop	bc

	inc	d			; increase d to print the next nibble at position d+1

	ld	a,c			; get low nibble
	and	$0F
	ld	c,a
	call	printHex4		; print low nibble

	pop	af
	pop	de
	pop	bc

	ret
; **
; Waits for VBlank and returns
; **
waitForVblank:
	push	af
.wait:				; wait for vblank
 	ld    a,[rLY]
 	cp    145             	; Is display on scan line 145 yet?
 	jr	nz,.wait        	; no, keep waiting
 	pop	af
 	ret

; **
; Deacivates the LCD screen
; Usefull if we try to set VRAM $8000
; **
stopLCD:
      ld      a,[rLCDC]
      rlca                    ; Put the high bit of LCDC into the Carry flag
      ret     nc              ; Screen is off already. Exit.

.wait:				; Loop until we are in VBlank
      ld      a,[rLY]
      cp      145             ; Is display on scan line 145 yet?
      jr      nz,.wait        ; no, keep waiting

      ld      a,[rLCDC]		; Turn off the LCD
      res     7,a             ; Reset bit 7 of LCDC
      ld      [rLCDC],a

      ret

; **
; Waits the given number of times for vblank
; --
; Input: b = times to wait
; Output: b = 0
; **
simpleDelay:
.loop:
	call	waitForVblank
	dec	b
	jr	nz,.loop
	ret
