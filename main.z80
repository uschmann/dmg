; Hello World 1.0
; February 2, 2007
; John Harrison
; Based mostly from GALP

INCLUDE "include/gbhw.z80" ; standard hardware definitions from devrs.com
INCLUDE "include/ibmpc1.z80" ; ASCII character set from devrs.com

; IRQs
SECTION	"Vblank",HOME[$0040]
	reti
SECTION	"LCDC",HOME[$0048]
	reti
SECTION	"Timer_Overflow",HOME[$0050]
	reti
SECTION	"Serial",HOME[$0058]
	reti
SECTION	"p1thru4",HOME[$0060]
	reti

; ****************************************************************************************
; boot loader jumps to here.
; ****************************************************************************************
SECTION	"start",HOME[$0100]
nop
jp	begin

; ****************************************************************************************
; ROM HEADER and ASCII character set
; ****************************************************************************************
; ROM header
	ROM_HEADER	ROM_NOMBC, ROM_SIZE_32KBYTE, RAM_SIZE_0KBYTE
; librarys
INCLUDE "include/memory.z80"
INCLUDE "include/math.z80"
INCLUDE "include/printFunctions.z80"
INCLUDE "include/pad.z80"
; Game includes
INCLUDE "title.z80"
INCLUDE "game.z80"	; Game logic

TileData:
	chr_IBMPC1	1,8 ; LOAD ENTIRE CHARACTER SET

; ****************************************************************************************
; Main code Initialization:
; set the stack pointer, enable interrupts, set the palette, set the screen relative to the window
; copy the ASCII character table, clear the screen
; ****************************************************************************************
begin:
	nop
	di
	ld	sp, $ffff		; set the stack pointer to highest mem location + 1
init:
	ld	a, %11100100 	; Window palette colors, from darkest to lightest
	ld	[rBGP], a		; CLEAR THE SCREEN

	ld	a,0			; SET SCREEN TO TO UPPER RIGHT HAND CORNER
	ld	[rSCX], a
	ld	[rSCY], a		
	call	stopLCD		; YOU CAN NOT LOAD $8000 WITH LCD ON
	ld	hl, TileData
	ld	de, _VRAM		; $8000
	ld	bc, 8*256 		; the ASCII character set: 256 characters, each with 8 bytes of display data
	call	mem_CopyMono	; load tile data
	
	
	call	clearScreen
	call	clearOamMemory


	; turn on LCD
	ld	a, LCDCF_ON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_BGON|LCDCF_OBJ8|LCDCF_OBJON
	ld	[rLCDC], a	


	call	showTitleScreen
	call	startGame


SECTION	"global", BSS
_PAD:			; allocate 1 byte for the state of the pad
	DS	$01	
_LIFES:		; Number of lifes left
	DS	$01	
_BLOCKS:
	DS	$01	; Number of blocks
_X:	
	DS	$02	; Current x position
_Y:
	DS	$01	; Current y poition
_SPEED:
	DS	$01	; current speed of the blocks
_DIRECTION:
	DS	$01	; Current direction 0 = left 1 = right